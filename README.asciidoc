== Scala Module for Vert.x

Scala language implementation for vert.x 2.0

=== Quickstart

To use it, we've added a first "Hello World"-like example to the 
https://github.com/vert-x/vertx-examples/blob/master/src/raw/scala[Vert.x Examples repository]
which can be run like this:

1. Download latest Vert.x distribution. Preferably 2.0.3 or higher, which
includes DNS support.
2. Open [VERTX_HOME]/conf/langs.properties file and these lines:
+
...............................................................................
scala=io.vertx~lang-scala~0.1.1:org.vertx.scala.platform.impl.ScalaVerticleFactory
.scala=scala
...............................................................................
+

3. Clone or download the Vert.x Examples Git repository
4. Change directory to `src/raw/scala` and type:
+
...............................................................................
[VERTX_HOME]/bin/vertx run httphelloworld/HelloWorldServer.scala
...............................................................................
+

5. Go to http://localhost:8080/ and you should see the message: "Hello Scala World!"

=== Current issues 

The event bus currently uses anonymous functions as handlers. The implicit 
conversion of the functions to handlers is causing "unregisterHandler" not to 
work, as a new Handler[Message[X]] is created from the anonymous function 
every time. Therefore we need to provide a registerHandler method that takes a 
Handler[Message[X]] itself, if a user wants to unregister this handler later.

Constructing a java.core.Handler[java.core.eventbus.Message[X]] is not really 
easy to do in Scala thus we should provide another function, that helps users 
create this.

def convertMessageFunctionToHandler(handler: Message[X] => Unit): Handler[Message[X]
