/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'java'
apply from: "gradle/maven.gradle"
apply from: "gradle/setup.gradle"

group = groupname
archivesBaseName = artifact

defaultTasks = ['assemble']

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

configurations {
  provided
  testCompile.extendsFrom provided
}

repositories {
  mavenLocal()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

dependencies {
  compile "org.scala-lang:scala-library:$scalaVersion"
  compile "org.scala-lang:scala-compiler:$scalaVersion"

  provided "io.vertx:vertx-core:$vertxVersion"
  provided "io.vertx:vertx-platform:$vertxVersion"

  provided( "io.vertx:vertx-testframework:$vertxVersion" ) {
    transitive = false
  }
  testCompile  "junit:junit:$junitVersion"
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
  test {
    resources {
      srcDirs "src/test/scala_scripts", "src/|/test/resources"
    }
  }
}

task copyMod( type:Copy, dependsOn: 'classes' ) {
  into "build/mod/maven:$groupname:$artifact:$version"
  from compileJava
  from 'src/main/conf'
  from 'src/main/resources'
  into( 'lib' ) {
    from configurations.compile
  }
}

// Package into build/libs/mod.zip
task dist( type: Zip) {
  group = 'vert.x'
  description = "Assembles a vert.x module"
  destinationDir = project.file('build/libs')
  archiveName = "${artifact}-${version}" + ".zip"
  from copyMod
}

artifacts {
  archives dist
}

task cleanTestTmpModules(type: Delete) {
  delete { file("src/test/mod-test").listFiles().find {
    true
  } }
}

clean {
  dependsOn cleanTestTmpModules
}

task prepareVertxTest(type: Copy, dependsOn: [cleanTestTmpModules, copyMod]) {
  from 'build/mod'
  into 'src/test/mod-test' // Copy the mod into the mods directory
}

test {
  dependsOn prepareVertxTest

  // Remove any classpath entries for the classes or resources of the rhino verticle and also remove the
  // Rhino jar from the classpath
  // If we don't do this then the system classloader will load them which can cause issues with loading resources
  // from inside JS verticles
  classpath -= sourceSets.main.output
  classpath -= configurations.compile

  outputs.upToDateWhen { false }

  // Some vert.x properties
  systemProperty 'vertx.test.timeout', 15
  systemProperty 'vertx.mods', "$projectDir/src/test/mod-test"  // Set vertx.mods to the mod directory
  systemProperty 'vertx.version', "$project.version"

  // Show output
  testLogging.showStandardStreams = true

  testLogging { exceptionFormat "full" }
}


task collectDeps(type: Copy) {
  group = 'vert.x'
  description = 'conveniently collect dependencies for other IDEs'
  destinationDir = file("build/deps")
  into("compile") {
    from configurations.compile
  }
  into("test") {
    from configurations.testCompile
  }
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.useAnt = false
  // FIXME remove when Gradle 1.5 is released
  scalaCompileOptions.additionalParameters = ['-target:jvm-1.7']
}


// TODO scaladoc
scaladoc {
  excludes = ["**/impl/**"]
  destinationDir = file("build/docs/scala/api")
  outputs.dir destinationDir
}

// Map the 'provided' dependency configuration to the appropriate IDEA visibility scopes.
plugins.withType(IdeaPlugin) {
  idea {
    module {
      scopes.PROVIDED.plus += configurations.provided
      scopes.COMPILE.minus += configurations.provided
      scopes.TEST.minus += configurations.provided
      scopes.RUNTIME.minus += configurations.provided
    }
  }
}
